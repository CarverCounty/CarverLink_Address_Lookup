var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
define(["require", "exports", "esri/layers/effects/jsonUtils"], function (require, exports, jsonUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMergedEffect = void 0;
    function getMergedEffect(presetLayerEffect, featureLayerView, type) {
        var layer = featureLayerView === null || featureLayerView === void 0 ? void 0 : featureLayerView.layer;
        if (!presetLayerEffect) {
            if (layer === null || layer === void 0 ? void 0 : layer.effect) {
                return layer.effect;
            }
            else if (layer === null || layer === void 0 ? void 0 : layer.featureEffect) {
                return type === "includedEffect"
                    ? layer.featureEffect.includedEffect
                    : layer.featureEffect.excludedEffect;
            }
            else {
                return null;
            }
        }
        // CONVERT EXISTING EFFECT AND PRESET LAYER EFFECT TO JSON
        var presetLayerEffectJSON = jsonUtils_1.toJSON(presetLayerEffect);
        var layerEffect = layer.effect;
        var layerFeatureEffect = layer.featureEffect;
        var existingEffect = null;
        if (layerFeatureEffect) {
            existingEffect =
                type === "includedEffect"
                    ? layer.featureEffect.includedEffect
                    : layer.featureEffect.excludedEffect;
        }
        else {
            existingEffect = layerEffect;
        }
        var existingEffectJSON = existingEffect ? jsonUtils_1.toJSON(existingEffect) : null;
        // RETURN PRESET LAYER EFFECT IF THERE ARE NO EXISTING EFFECTS
        if (!existingEffectJSON) {
            return jsonUtils_1.fromJSON(presetLayerEffectJSON);
        }
        var effectToUse = __spreadArrays(existingEffectJSON);
        if (presetLayerEffectJSON) {
            // ITERATE THROUGH PRESET LAYER EFFECT JSON
            presetLayerEffectJSON.forEach(function (presetLayerEffectItem) {
                // ITERATE THROUGH EXISTING EFFECT JSON
                effectToUse.forEach(function (existingEffectToUseItem) {
                    var value = existingEffectToUseItem.value;
                    if (value) {
                        // ITERATE THROUGH EXISTING EFFECT JSON VALUES
                        value.forEach(function (effectValue, effectIndex) {
                            // REPLACE EXISTING EFFECT VALUE IF SAME TYPE IS PRESENT IN PRESET LAYER EFFECT
                            if (effectValue.type === presetLayerEffectItem.type) {
                                value[effectIndex] = presetLayerEffectItem;
                            }
                            // OTHERWISE MODIFY EXISTING EFFECT
                            else {
                                var notMerged = !existingEffectToUseItem.value.find(function (existingEffectItemToMerge) {
                                    return existingEffectItemToMerge.type === presetLayerEffectJSON[0].type;
                                });
                                // CHECK IF PRESET LAYER EFFECT HAS BEEN MERGED, IF NOT YET MERGED APPEND PRESET LAYER EFFECT TO EXISTING EFFECT
                                if (notMerged) {
                                    existingEffectToUseItem.value = __spreadArrays(existingEffectToUseItem.value, presetLayerEffectJSON);
                                }
                            }
                        });
                    }
                    else {
                        // HANDLE NON SCALE EFFECTS
                        var notMerged = !effectToUse.find(function (nonScaleEffectToUseItem) { return nonScaleEffectToUseItem.type === existingEffectToUseItem.type; });
                        var presetNotMerged = !effectToUse.find(function (nonScaleEffectToUseItem) { return nonScaleEffectToUseItem.type === presetLayerEffectItem.type; });
                        if (presetNotMerged) {
                            effectToUse = __spreadArrays(effectToUse, [presetLayerEffectItem]);
                        }
                        if (notMerged) {
                            effectToUse = __spreadArrays(effectToUse, [existingEffectToUseItem]);
                        }
                    }
                });
            });
        }
        var mergedEffect = jsonUtils_1.fromJSON(effectToUse);
        return mergedEffect;
    }
    exports.getMergedEffect = getMergedEffect;
});
